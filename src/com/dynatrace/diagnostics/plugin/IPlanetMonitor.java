
/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
 * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
 **/

package com.dynatrace.diagnostics.plugin;

import java.io.IOException;
import java.net.ConnectException;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.dynatrace.diagnostics.pdk.Monitor;
import com.dynatrace.diagnostics.pdk.MonitorEnvironment;
import com.dynatrace.diagnostics.pdk.MonitorMeasure;
import com.dynatrace.diagnostics.pdk.Plugin;
import com.dynatrace.diagnostics.pdk.Status;

public class IPlanetMonitor implements Monitor {

	private static final Logger log = Logger.getLogger(IPlanetMonitor.class.getName());

	/**
	 * The RangeGroup that will calculate the different second range groups Set
	 * range section < 1 seconds && >1s & <2s && >2s & <3s & >3s & <4s & >4s &
	 * <5s & >5s & <10s && >10s & <15s & > 15s
	 */
	private RangeGroup rangeGroup;

	/**
	 * The restAPI is the variable allowing access to the data displayed in
	 * dashboards
	 */
	private ServerRestAPI restAPI;

	HostnameVerifier defaultVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
	XPath xpath = XPathFactory.newInstance().newXPath();
	private Document doc;

	/**
	 * Initializes the Plugin. This method is called in the following cases:
	 * <ul>
	 * <li>before <tt>execute</tt> is called the first time for this scheduled
	 * Plugin</li>
	 * <li>before the next <tt>execute</tt> if <tt>teardown</tt> was called
	 * after the last execution</li>
	 * </ul>
	 * <p>
	 * If the returned status is <tt>null</tt> or the status code is a
	 * non-success code then {@link Plugin#teardown() teardown()} will be called
	 * next.
	 * <p>
	 * Resources like sockets or files can be opened in this method.
	 * 
	 * @param env
	 *            the configured <tt>MonitorEnvironment</tt> for this Plugin;
	 *            contains subscribed measures, but <b>measurements will be
	 *            discarded</b>
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the method
	 *         call
	 */

	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		Status status = new Status(Status.StatusCode.Success);
		// check plugin environment configuration parameter values
		if (env == null || env.getHost() == null) {
			status.setStatusCode(Status.StatusCode.ErrorInternalConfigurationProblem);
			status.setShortMessage("Environment was not properly initialized. env.host must not be null.");
			status.setMessage("Environment was not properly initialized. env.host must not be null.");
			Exception e = new IllegalArgumentException(
					"Environment was not properly initialized. env.host must not be null.");
			status.setException(e);
			log.log(Level.SEVERE, status.getMessage(), e);
			return status;
		}
		restAPI = new ServerRestAPI(env.getConfigString("dtServer"), env.getConfigString("username"),
				env.getConfigPassword("password"));
		rangeGroup = new RangeGroup();

		Collection<MonitorMeasure> measureNetDiff = env.getMonitorMeasures("NettoGroup", "netDiff");
		for (MonitorMeasure measure : measureNetDiff) {
			measure.setValue(0);
		}

		Collection<MonitorMeasure> measureRangeGroup = env.getMonitorMeasures("RangeGroup", "Range");
		for (MonitorMeasure measure : measureRangeGroup) {
			measure.setValue(0);
		}
		return status;
	}

	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		Status status = new Status();

		// Reset all ranges to 0
		rangeGroup.resetGroup();

		try {

			TrustSSL.trustAllCerts();
			// Return the XML document
			doc = restAPI.getDashboard(env.getConfigString("dashboardName"));

			NodeList dashlets = doc.getElementsByTagName("chartdashlet");
			//docEle.getChildNodes();
			if (dashlets != null) {
				int length = dashlets.getLength();
				for (int i = 0; i < length; i++) {
					
					calculateAllDashlets(env, dashlets.item(i));
					
				}
			}
			
			HttpsURLConnection.setDefaultHostnameVerifier(defaultVerifier);
		} catch (ConnectException ce) {
			status.setException(ce);
			status.setStatusCode(Status.StatusCode.PartialSuccess);
			status.setShortMessage(ce == null ? "" : ce.getClass().getSimpleName());
			log.log(Level.SEVERE, status.getMessage(), ce);
		} catch (Exception ioe) {
			status.setException(ioe);
			status.setStatusCode(Status.StatusCode.ErrorTargetServiceExecutionFailed);
			status.setShortMessage(ioe == null ? "" : ioe.getClass().getSimpleName());
		}

		return status;
	}

	private void calculateAllDashlets(MonitorEnvironment env, Node dashlet) {
		String chartName = dashlet.getAttributes().getNamedItem("name").getNodeValue();
		
		NodeList dashletChildren = dashlet.getChildNodes();
		for (int i = 0; i < dashletChildren.getLength(); i++) {
			if (dashletChildren.item(i).getNodeName().equals("measures")){// Get all measures
				NodeList measureNodes = dashletChildren.item(i).getChildNodes(); 
				
				Collection<MonitorMeasure> monitorMeasures = env.getMonitorMeasures("NettoGroup", "netDiff");


				//Collection<MonitorMeasure> monitorMeasures = env.getMonitorMeasures("NettoGroup", "netDiff");
				int nodeLength = measureNodes.getLength();
				if (nodeLength > 1) {
					//There are both PurePath and Waittime nodes to calculate
					for (int nodeIndex = 0; nodeIndex < nodeLength - 1; nodeIndex += 2) {
						BaloiseMeasureCalculator cal = new BaloiseMeasureCalculator(measureNodes.item(nodeIndex),
								measureNodes.item(nodeIndex + 1));

						for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures) {
							// Create dynamic measures
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, "NetDiff-" + chartName,
									cal.getMeasure1NamePrefix());
							dynamicMeasure.setValue(cal.calculateNetDiff());
						}
					}
				} else if (nodeLength == 1){
					//There are only Purepath nodes to calculate
					BaloiseMeasureCalculator cal = new BaloiseMeasureCalculator(measureNodes.item(0));
					for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures) {
						// Create dynamic measures
						MonitorMeasure dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, "NetDiff-" + chartName,
								cal.getMeasure1NamePrefix());
						dynamicMeasure.setValue(cal.calculateNetDiff());

					}
				} 
			}
		}
	}

	/**
	 * Shuts the Plugin down and frees resources. This method is called in the
	 * following cases:
	 * <ul>
	 * <li>the <tt>setup</tt> method failed</li>
	 * <li>the Plugin configuration has changed</li>
	 * <li>the execution duration of the Plugin exceeded the schedule
	 * timeout</li>
	 * <li>the schedule associated with this Plugin was removed</li>
	 * </ul>
	 *
	 * <p>
	 * The Plugin methods <tt>setup</tt>, <tt>execute</tt> and <tt>teardown</tt>
	 * are called on different threads, but they are called sequentially. This
	 * means that the execution of these methods does not overlap, they are
	 * executed one after the other.
	 *
	 * <p>
	 * Examples:
	 * <ul>
	 * <li><tt>setup</tt> (failed) -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, configuration changes, <tt>execute</tt> ends
	 * -&gt; <tt>teardown</tt><br>
	 * on next schedule interval: <tt>setup</tt> -&gt; <tt>execute</tt> ...</li>
	 * <li><tt>execute</tt> starts, execution duration timeout, <tt>execute</tt>
	 * stops -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, <tt>execute</tt> ends, schedule is removed
	 * -&gt; <tt>teardown</tt></li>
	 * </ul>
	 * Failed means that either an unhandled exception is thrown or the status
	 * returned by the method contains a non-success code.
	 *
	 *
	 * <p>
	 * All by the Plugin allocated resources should be freed in this method.
	 * Examples are opened sockets or files.
	 *
	 * @see Monitor#setup(MonitorEnvironment)
	 */
	@Override
	public void teardown(MonitorEnvironment env) throws Exception {
		HttpsURLConnection.setDefaultHostnameVerifier(defaultVerifier);
	}

	private void logSevere(String message) {
		if (log.isLoggable(Level.SEVERE)) {
			log.severe(message);
		}
	}

	private void logWarn(String message) {
		if (log.isLoggable(Level.WARNING)) {
			log.warning(message);
		}
	}

	private void logInfo(String message) {
		if (log.isLoggable(Level.INFO)) {
			log.info(message);
		}
	}

	private void logFine(String message) {
		if (log.isLoggable(Level.FINE)) {
			log.fine(message);
		}
	}
}

class TrustSSL {

	public static void trustAllCerts() throws Exception {
		// Create a trust manager that does not validate certificate chains
		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
			public java.security.cert.X509Certificate[] getAcceptedIssuers() {
				return null;
			}

			public void checkClientTrusted(X509Certificate[] certs, String authType) {
			}

			public void checkServerTrusted(X509Certificate[] certs, String authType) {
			}
		} };
		// Install the all-trusting trust manager
		final SSLContext sc = SSLContext.getInstance("SSL");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
		// Create all-trusting host name verifier
		HostnameVerifier allHostsValid = new HostnameVerifier() {
			public boolean verify(String hostname, SSLSession session) {
				return true;
			}
		};

		// Install the all-trusting host verifier
		HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

	}
}
